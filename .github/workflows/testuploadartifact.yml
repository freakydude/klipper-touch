name: 'testuploadartifact'

on: [push]

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: get version
        run: |
          echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
          echo "TAG_NAME=app-v$(node -p "require('./package.json').version")" >> $GITHUB_ENV
          echo "NAME=Desktop App v$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `${process.env.TAG_NAME}`,
              name: `${process.env.NAME}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        # platform: [macos-latest, ubuntu-20.04, windows-latest]
        platform: [ubuntu-20.04]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
      - name: install frontend dependencies
        run: yarn install # change this to npm or pnpm depending on which one you use
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}

  build-rpi:
    needs: create-release
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pguyot/arm-runner-action@v2
        id: build_image
        with:
          base_image: dietpi:rpi_armv8_bullseye #https://dietpi.com/downloads/images/DietPi_RPi-ARMv8-Bullseye.7z
          cpu: cortex-a53
          bind_mount_repository: true
          image_additional_mb: 10240
          optimize_image: false
          # commands: |
          #   # Rust complains (rightly) that $HOME doesn't match eid home
          #   export HOME=/root
          #   # Workaround to CI worker being stuck on Updating crates.io index
          #   export CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse
          #   # Install setup prerequisites
          #   apt update -y
          #   apt install -y ca-certificates curl gnupg
          #   mkdir -p /etc/apt/keyrings
          #   curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
          #   echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list
          #   apt update -y
          #   apt install -y nodejs libwebkit2gtk-4.0-dev build-essential curl wget file libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
          #   curl https://sh.rustup.rs -sSf | sh -s -- -y
          #   . "$HOME/.cargo/env"
          #   npm install
          #   npm install --save-dev @tauri-apps/cli
          #   npm run tauri build
          #   pwd
          commands: |
            touch ${{ github.workspace }}/src-tauri/target/release/bundle/deb/klipper-touch-0.0.1_arm64.deb
      - name: Release RPI deb
        uses: softprops/action-gh-release@v1
        with:
          name: $NAME
          tag_name: $TAG_NAME
          files: ${{ github.workspace }}/src-tauri/target/release/bundle/deb/*_arm64.deb

  # publish-release:
  #   permissions:
  #     contents: write
  #   runs-on: ubuntu-20.04
  #   needs: [create-release, build-tauri, build-rpi]

  #   steps:
  #     - name: publish release
  #       id: publish-release
  #       uses: actions/github-script@v6
  #       env:
  #         release_id: ${{ needs.create-release.outputs.release_id }}
  #       with:
  #         script: |
  #           github.rest.repos.updateRelease({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             release_id: process.env.release_id,
  #             draft: false,
  #             prerelease: false
  #           })
